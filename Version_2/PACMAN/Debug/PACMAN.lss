
PACMAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000057c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001561  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b9  00000000  00000000  00001ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008cb  00000000  00000000  0000255a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00002e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d4  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf8  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a0 02 	call	0x540	; 0x540 <main>
  9e:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_port_config>:
 * Example Call: lcd_port_config();
 */
void lcd_port_config(void)
{
	// Only set LCD pins direction as Output
	lcd_control_ddr_reg |= ( ( 1 << RS_pin ) | ( 1 << RW_pin ) | ( 1 << EN_pin ) );
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4
	lcd_data_ddr_reg	|= ( ( 1 << DB4_pin ) | ( 1 << DB5_pin ) | ( 1 << DB6_pin ) | ( 1 << DB7_pin ) );
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 6f       	ori	r24, 0xF0	; 240
  b0:	8a b9       	out	0x0a, r24	; 10
	
	// Only set LCD pins to logic 0
	lcd_control_port_reg	&=	~( ( 1 << RS_pin ) | ( 1 << RW_pin ) | ( 1 << EN_pin ) );
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	85 b9       	out	0x05, r24	; 5
	lcd_data_port_reg		&=	~( ( 1 << DB4_pin ) | ( 1 << DB5_pin ) | ( 1 << DB6_pin ) | ( 1 << DB7_pin ) );
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	08 95       	ret

000000c0 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f e9       	ldi	r24, 0x9F	; 159
  c2:	9f e0       	ldi	r25, 0x0F	; 15
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_set_4bit+0x4>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_set_4bit+0xa>
  ca:	00 00       	nop
 */
void lcd_set_4bit (void)
{
	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
  cc:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
  ce:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
  d4:	29 9a       	sbi	0x05, 1	; 5
  d6:	ef e1       	ldi	r30, 0x1F	; 31
  d8:	fe e4       	ldi	r31, 0x4E	; 78
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_set_4bit+0x1a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_set_4bit+0x20>
  e0:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
  e2:	29 98       	cbi	0x05, 1	; 5
  e4:	ef e9       	ldi	r30, 0x9F	; 159
  e6:	ff e0       	ldi	r31, 0x0F	; 15
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_set_4bit+0x28>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_set_4bit+0x2e>
  ee:	00 00       	nop

	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
  f0:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
  f2:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
  f4:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
  f6:	29 9a       	sbi	0x05, 1	; 5
  f8:	ef e1       	ldi	r30, 0x1F	; 31
  fa:	fe e4       	ldi	r31, 0x4E	; 78
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_set_4bit+0x3c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_set_4bit+0x42>
 102:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 104:	29 98       	cbi	0x05, 1	; 5
 106:	ef e9       	ldi	r30, 0x9F	; 159
 108:	ff e0       	ldi	r31, 0x0F	; 15
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_set_4bit+0x4a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_set_4bit+0x50>
 110:	00 00       	nop

	_delay_ms(1);	
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 112:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 114:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
 116:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 118:	29 9a       	sbi	0x05, 1	; 5
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_set_4bit+0x5e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_set_4bit+0x64>
 124:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 126:	29 98       	cbi	0x05, 1	; 5
 128:	ef e9       	ldi	r30, 0x9F	; 159
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x6c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_set_4bit+0x72>
 132:	00 00       	nop
	
	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 134:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 136:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x20;							// Sending 2 to initialize LCD in 4-bit mode
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 13c:	29 9a       	sbi	0x05, 1	; 5
 13e:	8f e1       	ldi	r24, 0x1F	; 31
 140:	9e e4       	ldi	r25, 0x4E	; 78
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x82>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x88>
 148:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 14a:	29 98       	cbi	0x05, 1	; 5
 14c:	08 95       	ret

0000014e <lcd_wr_command>:
{
	unsigned char temp;
	
	temp = cmd;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	9b b9       	out	0x0b, r25	; 11
	lcd_data_port_reg |= temp;
 154:	9b b1       	in	r25, 0x0b	; 11
 156:	28 2f       	mov	r18, r24
 158:	20 7f       	andi	r18, 0xF0	; 240
 15a:	92 2b       	or	r25, r18
 15c:	9b b9       	out	0x0b, r25	; 11
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 15e:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 160:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 162:	29 9a       	sbi	0x05, 1	; 5
 164:	ef e1       	ldi	r30, 0x1F	; 31
 166:	fe e4       	ldi	r31, 0x4E	; 78
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_wr_command+0x1a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_wr_command+0x20>
 16e:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 170:	29 98       	cbi	0x05, 1	; 5
	
	cmd = (cmd & 0x0F);
	cmd = (cmd << 4);
	lcd_data_port_reg &= 0x0F;
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	9f 70       	andi	r25, 0x0F	; 15
 176:	9b b9       	out	0x0b, r25	; 11
	lcd_data_port_reg |= cmd;
 178:	9b b1       	in	r25, 0x0b	; 11
 17a:	82 95       	swap	r24
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	89 2b       	or	r24, r25
 180:	8b b9       	out	0x0b, r24	; 11
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 182:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 184:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 186:	29 9a       	sbi	0x05, 1	; 5
 188:	8f e1       	ldi	r24, 0x1F	; 31
 18a:	9e e4       	ldi	r25, 0x4E	; 78
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_wr_command+0x3e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_wr_command+0x44>
 192:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 194:	29 98       	cbi	0x05, 1	; 5
 196:	08 95       	ret

00000198 <lcd_init>:
 * Logic: This function initializes the LCD
 * Example Call: lcd_init();
 */
void lcd_init (void)
{
	lcd_set_4bit();
 198:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_set_4bit>
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x8>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_init+0xe>
 1a6:	00 00       	nop
	_delay_ms(1);
	lcd_wr_command(0x28);								// LCD 4-bit mode and 2 lines
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
	lcd_wr_command(0x01);								// Clear display screen
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
	lcd_wr_command(0x06);								// Entry mode
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
	lcd_wr_command(0x0E);								// Display On and Cursor On
 1ba:	8e e0       	ldi	r24, 0x0E	; 14
 1bc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
	lcd_wr_command(0x80);								// LCD cursor set to Home position		
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1c6:	08 95       	ret

000001c8 <lcd_home>:
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);								// LCD cursor set to Home position
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1ce:	08 95       	ret

000001d0 <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	71 f0       	breq	.+28     	; 0x1f0 <lcd_cursor+0x20>
 1d4:	18 f4       	brcc	.+6      	; 0x1dc <lcd_cursor+0xc>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <lcd_cursor+0x16>
 1da:	08 95       	ret
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	69 f0       	breq	.+26     	; 0x1fa <lcd_cursor+0x2a>
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	81 f0       	breq	.+32     	; 0x204 <lcd_cursor+0x34>
 1e4:	08 95       	ret
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 1e6:	8f e7       	ldi	r24, 0x7F	; 127
 1e8:	86 0f       	add	r24, r22
 1ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1ee:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 1f0:	8f eb       	ldi	r24, 0xBF	; 191
 1f2:	86 0f       	add	r24, r22
 1f4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1f8:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 1fa:	83 e9       	ldi	r24, 0x93	; 147
 1fc:	86 0f       	add	r24, r22
 1fe:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 202:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 204:	83 ed       	ldi	r24, 0xD3	; 211
 206:	86 0f       	add	r24, r22
 208:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 20c:	08 95       	ret

0000020e <lcd_clear>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 214:	08 95       	ret

00000216 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 216:	cf 93       	push	r28
 218:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 21a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	8f 70       	andi	r24, 0x0F	; 15
 222:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= temp;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	9c 2f       	mov	r25, r28
 228:	90 7f       	andi	r25, 0xF0	; 240
 22a:	89 2b       	or	r24, r25
 22c:	8b b9       	out	0x0b, r24	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 22e:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 230:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 232:	29 9a       	sbi	0x05, 1	; 5
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	9e e4       	ldi	r25, 0x4E	; 78
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x22>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x28>
 23e:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 240:	29 98       	cbi	0x05, 1	; 5
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= alpha_num_char;
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	c2 95       	swap	r28
 24c:	c0 7f       	andi	r28, 0xF0	; 240
 24e:	c8 2b       	or	r28, r24
 250:	cb b9       	out	0x0b, r28	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 252:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 254:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 256:	29 9a       	sbi	0x05, 1	; 5
 258:	8f e1       	ldi	r24, 0x1F	; 31
 25a:	9e e4       	ldi	r25, 0x4E	; 78
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x46>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x4c>
 262:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 264:	29 98       	cbi	0x05, 1	; 5
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	d8 2f       	mov	r29, r24
 274:	c6 2f       	mov	r28, r22
 276:	fa 01       	movw	r30, r20
	while(*str != '\0')
 278:	40 81       	ld	r20, Z
 27a:	44 23       	and	r20, r20
 27c:	69 f0       	breq	.+26     	; 0x298 <lcd_string+0x2e>
 27e:	8f 01       	movw	r16, r30
 280:	0f 5f       	subi	r16, 0xFF	; 255
 282:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 284:	6c 2f       	mov	r22, r28
 286:	8d 2f       	mov	r24, r29
 288:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
		str++;
		column+=1;
 28c:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 28e:	f8 01       	movw	r30, r16
 290:	41 91       	ld	r20, Z+
 292:	8f 01       	movw	r16, r30
 294:	41 11       	cpse	r20, r1
 296:	f6 cf       	rjmp	.-20     	; 0x284 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	08 95       	ret

000002a2 <custom_char>:
#include "lcd.h"
#include <util/delay.h>


void custom_char (unsigned char index, unsigned char *data)
{
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
	unsigned char i;
	if(index<8)
 2aa:	88 30       	cpi	r24, 0x08	; 8
 2ac:	90 f4       	brcc	.+36     	; 0x2d2 <custom_char+0x30>
 2ae:	8b 01       	movw	r16, r22
	{
		lcd_wr_command(0x40 + (index*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 2b0:	88 0f       	add	r24, r24
 2b2:	88 0f       	add	r24, r24
 2b4:	88 0f       	add	r24, r24
 2b6:	80 5c       	subi	r24, 0xC0	; 192
 2b8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 2bc:	e8 01       	movw	r28, r16
 2be:	08 5f       	subi	r16, 0xF8	; 248
 2c0:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)            	    /* Write 8 byte for generation of 1 character */
		lcd_wr_char(0,0,data[i]);
 2c2:	49 91       	ld	r20, Y+
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
{
	unsigned char i;
	if(index<8)
	{
		lcd_wr_command(0x40 + (index*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)            	    /* Write 8 byte for generation of 1 character */
 2cc:	c0 17       	cp	r28, r16
 2ce:	d1 07       	cpc	r29, r17
 2d0:	c1 f7       	brne	.-16     	; 0x2c2 <custom_char+0x20>
		lcd_wr_char(0,0,data[i]);
	}
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <creat_char>:

void creat_char()

{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	c0 54       	subi	r28, 0x40	; 64
 2e6:	d1 09       	sbc	r29, r1
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61

	unsigned char round[]       =  {0x00,0x0E,0x1F,0x1F,0x1F,0x0E,0x00,0x00};
 2f2:	88 e0       	ldi	r24, 0x08	; 8
 2f4:	e0 e0       	ldi	r30, 0x00	; 0
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	de 01       	movw	r26, r28
 2fa:	11 96       	adiw	r26, 0x01	; 1
 2fc:	01 90       	ld	r0, Z+
 2fe:	0d 92       	st	X+, r0
 300:	8a 95       	dec	r24
 302:	e1 f7       	brne	.-8      	; 0x2fc <creat_char+0x20>
	unsigned char open_round[]  =  {0x00,0x0F,0x1E,0x18,0x1E,0x0F,0x00,0x00};
 304:	88 e0       	ldi	r24, 0x08	; 8
 306:	e8 e0       	ldi	r30, 0x08	; 8
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	de 01       	movw	r26, r28
 30c:	19 96       	adiw	r26, 0x09	; 9
 30e:	01 90       	ld	r0, Z+
 310:	0d 92       	st	X+, r0
 312:	8a 95       	dec	r24
 314:	e1 f7       	brne	.-8      	; 0x30e <creat_char+0x32>
	unsigned char three_teeth[] =  {0x00,0x0E,0x1F,0x15,0x1F,0x15,0x00,0x00};
 316:	88 e0       	ldi	r24, 0x08	; 8
 318:	e0 e1       	ldi	r30, 0x10	; 16
 31a:	f1 e0       	ldi	r31, 0x01	; 1
 31c:	de 01       	movw	r26, r28
 31e:	51 96       	adiw	r26, 0x11	; 17
 320:	01 90       	ld	r0, Z+
 322:	0d 92       	st	X+, r0
 324:	8a 95       	dec	r24
 326:	e1 f7       	brne	.-8      	; 0x320 <creat_char+0x44>
	unsigned char two_teeth[]   =  {0x00,0x0E,0x1F,0x15,0x1F,0x0A,0x00,0x00};
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	e8 e1       	ldi	r30, 0x18	; 24
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	de 01       	movw	r26, r28
 330:	59 96       	adiw	r26, 0x19	; 25
 332:	01 90       	ld	r0, Z+
 334:	0d 92       	st	X+, r0
 336:	8a 95       	dec	r24
 338:	e1 f7       	brne	.-8      	; 0x332 <creat_char+0x56>
	unsigned char four_dot[]    =  {0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x00};
 33a:	88 e0       	ldi	r24, 0x08	; 8
 33c:	e0 e2       	ldi	r30, 0x20	; 32
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	de 01       	movw	r26, r28
 342:	91 96       	adiw	r26, 0x21	; 33
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	8a 95       	dec	r24
 34a:	e1 f7       	brne	.-8      	; 0x344 <creat_char+0x68>
	unsigned char fade1[]       =  {0x00,0x0E,0x1F,0x1F,0x1F,0x0E,0x00,0x00};
 34c:	88 e0       	ldi	r24, 0x08	; 8
 34e:	e0 e0       	ldi	r30, 0x00	; 0
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	de 01       	movw	r26, r28
 354:	99 96       	adiw	r26, 0x29	; 41
 356:	01 90       	ld	r0, Z+
 358:	0d 92       	st	X+, r0
 35a:	8a 95       	dec	r24
 35c:	e1 f7       	brne	.-8      	; 0x356 <creat_char+0x7a>
	unsigned char fade2[]       =  {0x00,0x0A,0x1B,0x1F,0x1F,0x0E,0x00,0x00};
 35e:	88 e0       	ldi	r24, 0x08	; 8
 360:	e8 e2       	ldi	r30, 0x28	; 40
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	de 01       	movw	r26, r28
 366:	d1 96       	adiw	r26, 0x31	; 49
 368:	01 90       	ld	r0, Z+
 36a:	0d 92       	st	X+, r0
 36c:	8a 95       	dec	r24
 36e:	e1 f7       	brne	.-8      	; 0x368 <creat_char+0x8c>
	unsigned char fade3[]       =  {0x00,0x00,0x00,0x04,0x0E,0x0E,0x00,0x00};
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	e0 e3       	ldi	r30, 0x30	; 48
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	de 01       	movw	r26, r28
 378:	d9 96       	adiw	r26, 0x39	; 57
 37a:	01 90       	ld	r0, Z+
 37c:	0d 92       	st	X+, r0
 37e:	8a 95       	dec	r24
 380:	e1 f7       	brne	.-8      	; 0x37a <creat_char+0x9e>
	
	custom_char(7,round);
 382:	be 01       	movw	r22, r28
 384:	6f 5f       	subi	r22, 0xFF	; 255
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	87 e0       	ldi	r24, 0x07	; 7
 38a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <custom_char>
	custom_char(1,open_round);
 38e:	be 01       	movw	r22, r28
 390:	67 5f       	subi	r22, 0xF7	; 247
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 51 01 	call	0x2a2	; 0x2a2 <custom_char>
	custom_char(2,three_teeth);
 39a:	be 01       	movw	r22, r28
 39c:	6f 5e       	subi	r22, 0xEF	; 239
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <custom_char>
	custom_char(3,two_teeth);
 3a6:	be 01       	movw	r22, r28
 3a8:	67 5e       	subi	r22, 0xE7	; 231
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 51 01 	call	0x2a2	; 0x2a2 <custom_char>
	custom_char(4,four_dot);
 3b2:	be 01       	movw	r22, r28
 3b4:	6f 5d       	subi	r22, 0xDF	; 223
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	0e 94 51 01 	call	0x2a2	; 0x2a2 <custom_char>
	custom_char(5,fade1);
 3be:	be 01       	movw	r22, r28
 3c0:	67 5d       	subi	r22, 0xD7	; 215
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	85 e0       	ldi	r24, 0x05	; 5
 3c6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <custom_char>
	custom_char(6,fade2);
 3ca:	be 01       	movw	r22, r28
 3cc:	6f 5c       	subi	r22, 0xCF	; 207
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <custom_char>
	custom_char(0,fade3);
 3d6:	be 01       	movw	r22, r28
 3d8:	67 5c       	subi	r22, 0xC7	; 199
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 51 01 	call	0x2a2	; 0x2a2 <custom_char>
	
}
 3e2:	c0 5c       	subi	r28, 0xC0	; 192
 3e4:	df 4f       	sbci	r29, 0xFF	; 255
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <play_game>:


void play_game()
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 unsigned char i;
 lcd_wr_char(2,16,3);
 3fa:	43 e0       	ldi	r20, 0x03	; 3
 3fc:	60 e1       	ldi	r22, 0x10	; 16
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 for(i=1;i<=15;i++)
 404:	c1 e0       	ldi	r28, 0x01	; 1
  {
	  lcd_wr_char(2,i,4);
 406:	44 e0       	ldi	r20, 0x04	; 4
 408:	6c 2f       	mov	r22, r28
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
	  
	  if(i%2 == 0)
 410:	c0 fd       	sbrc	r28, 0
 412:	06 c0       	rjmp	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	    lcd_wr_char(2,16,3);
 414:	43 e0       	ldi	r20, 0x03	; 3
 416:	60 e1       	ldi	r22, 0x10	; 16
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	  else
	     lcd_wr_char(2,16,2);
 420:	42 e0       	ldi	r20, 0x02	; 2
 422:	60 e1       	ldi	r22, 0x10	; 16
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	81 ee       	ldi	r24, 0xE1	; 225
 42e:	94 e0       	ldi	r25, 0x04	; 4
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop

void play_game()
{
 unsigned char i;
 lcd_wr_char(2,16,3);
 for(i=1;i<=15;i++)
 43c:	cf 5f       	subi	r28, 0xFF	; 255
 43e:	c0 31       	cpi	r28, 0x10	; 16
 440:	11 f7       	brne	.-60     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 442:	d0 e0       	ldi	r29, 0x00	; 0
 444:	c1 e0       	ldi	r28, 0x01	; 1
 446:	cd 0f       	add	r28, r29
  }
  
   for(i=1;i<=15;i++)
   {
	   	   
	   if(i%2 == 0)
 448:	c0 fd       	sbrc	r28, 0
 44a:	1e c0       	rjmp	.+60     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	   {
		 lcd_wr_char(2,i,' ');
 44c:	40 e2       	ldi	r20, 0x20	; 32
 44e:	6c 2f       	mov	r22, r28
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
		 lcd_wr_char(2,i,1);   //open mouth
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	6c 2f       	mov	r22, r28
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
		 lcd_wr_char(2,16,3);  //two teeth
 460:	43 e0       	ldi	r20, 0x03	; 3
 462:	60 e1       	ldi	r22, 0x10	; 16
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
		 lcd_wr_char(2,i-1,' ');
 46a:	40 e2       	ldi	r20, 0x20	; 32
 46c:	6d 2f       	mov	r22, r29
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 474:	2f e7       	ldi	r18, 0x7F	; 127
 476:	89 ea       	ldi	r24, 0xA9	; 169
 478:	93 e0       	ldi	r25, 0x03	; 3
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 484:	00 00       	nop
 486:	1d c0       	rjmp	.+58     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		 
	   }
	   
	   else
	   {
		lcd_wr_char(2,i,' ');
 488:	40 e2       	ldi	r20, 0x20	; 32
 48a:	6c 2f       	mov	r22, r28
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
		lcd_wr_char(2,i,7);  // round
 492:	47 e0       	ldi	r20, 0x07	; 7
 494:	6c 2f       	mov	r22, r28
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
		lcd_wr_char(2,16,2); // three teeth
 49c:	42 e0       	ldi	r20, 0x02	; 2
 49e:	60 e1       	ldi	r22, 0x10	; 16
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
		lcd_wr_char(2,i-1,' ');
 4a6:	40 e2       	ldi	r20, 0x20	; 32
 4a8:	6d 2f       	mov	r22, r29
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 4b0:	2f e7       	ldi	r18, 0x7F	; 127
 4b2:	89 ea       	ldi	r24, 0xA9	; 169
 4b4:	93 e0       	ldi	r25, 0x03	; 3
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	82 e5       	ldi	r24, 0x52	; 82
 4c6:	97 e0       	ldi	r25, 0x07	; 7
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d2:	00 00       	nop
 4d4:	dc 2f       	mov	r29, r28
	  else
	     lcd_wr_char(2,16,2);
	_delay_ms(100);
  }
  
   for(i=1;i<=15;i++)
 4d6:	cf 30       	cpi	r28, 0x0F	; 15
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4da:	b4 cf       	rjmp	.-152    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	   }
	   
	   _delay_ms(150);
   }
   
   lcd_wr_char(2,15,5);
 4dc:	45 e0       	ldi	r20, 0x05	; 5
 4de:	6f e0       	ldi	r22, 0x0F	; 15
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 4e6:	2f ef       	ldi	r18, 0xFF	; 255
 4e8:	82 e5       	ldi	r24, 0x52	; 82
 4ea:	97 e0       	ldi	r25, 0x07	; 7
 4ec:	21 50       	subi	r18, 0x01	; 1
 4ee:	80 40       	sbci	r24, 0x00	; 0
 4f0:	90 40       	sbci	r25, 0x00	; 0
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f6:	00 00       	nop
   _delay_ms(150);
   lcd_wr_char(2,15,6);
 4f8:	46 e0       	ldi	r20, 0x06	; 6
 4fa:	6f e0       	ldi	r22, 0x0F	; 15
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 502:	2f ef       	ldi	r18, 0xFF	; 255
 504:	82 e5       	ldi	r24, 0x52	; 82
 506:	97 e0       	ldi	r25, 0x07	; 7
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 510:	00 c0       	rjmp	.+0      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 512:	00 00       	nop
   _delay_ms(150);
   lcd_wr_char(2,15,0);
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	6f e0       	ldi	r22, 0x0F	; 15
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 51e:	2f ef       	ldi	r18, 0xFF	; 255
 520:	82 e5       	ldi	r24, 0x52	; 82
 522:	97 e0       	ldi	r25, 0x07	; 7
 524:	21 50       	subi	r18, 0x01	; 1
 526:	80 40       	sbci	r24, 0x00	; 0
 528:	90 40       	sbci	r25, 0x00	; 0
 52a:	e1 f7       	brne	.-8      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52e:	00 00       	nop
   _delay_ms(150);
   lcd_wr_char(2,15,' ');
 530:	40 e2       	ldi	r20, 0x20	; 32
 532:	6f e0       	ldi	r22, 0x0F	; 15
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
  
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <main>:



int main(void)
{
	lcd_port_config();
 540:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_port_config>
	lcd_init();
 544:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_init>
	creat_char();
 548:	0e 94 6e 01 	call	0x2dc	; 0x2dc <creat_char>
	while (1)
	{
		lcd_clear();
 54c:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
		lcd_home();
 550:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_home>
		lcd_string(1,5,"PACMAN");
 554:	48 e3       	ldi	r20, 0x38	; 56
 556:	51 e0       	ldi	r21, 0x01	; 1
 558:	65 e0       	ldi	r22, 0x05	; 5
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_string>
		play_game();
 560:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <play_game>
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	87 ea       	ldi	r24, 0xA7	; 167
 568:	91 e6       	ldi	r25, 0x61	; 97
 56a:	21 50       	subi	r18, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <main+0x2a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <main+0x34>
 574:	00 00       	nop
 576:	ea cf       	rjmp	.-44     	; 0x54c <main+0xc>

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
